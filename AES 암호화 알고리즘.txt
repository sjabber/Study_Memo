대칭키 암호화 알고리즘
1. 대칭키 암호?
- 암호문을 생성(암호화)할 때 사용하는 키와 암호문으로부터 평문을 복원할 때 사용하는 키가 동일한
일반적인 암호시스템

2. 혼돈과 확산
- 혼돈과 확산의 성질을 이용하여 평문을 암호화
혼돈 : 치환(substition), 문자를 다른 문자로 바꾸는 것 = 암호문으로부터 키를 알아낼 수 없게 하는 성질
확산 : 순열(permutation), 문자들이 순서를 바꾸는 것 = 암호문으로부터 원문을 알아낼 수 없게 하는 성질

공격자가 아무리 많은 평문-암호문 쌍을 알고 있어도 그 속에서 키의 패턴을 발견할 수 없어야 한다.
또한 서로 다른 원문이 비슷한 내용을 담고 있더라도 각각의 암호문은 완전히 다른 값을 가져야 한다.

SPN(Substitution Permutation Network) : Substition-Permutation을 연속하여 수행하도록 이어놓은 것
SPN에서 한번의 Substitution-Permutation 수행을 라운드 또는 레이어라고 한다.
여러번 수행할수록 안전하다.

AES의 경우 블록 크기는 128비트(16바이트)
모든 데이터가 16바이트 크기를 가질 수 없으므로, 데이터를 블록단위로 나누어 처리하고 합치는 과정이 필요하다.

운용모드
데이터를 블록으로 나누어 처리하고 합치는 것

ECB(Electronic Code Book)
- 단순히 블록 단위로 처리한 결과를 이어붙이는 방식
- 같은 값을 갖는 원문 블록은 같은 암호블록을 출력하기 때문에 원문의 패턴이 그대로 드러난다.
	(유추가능 = 확산 성질 달성X)

CBC(Cipher Block Chaning)
- 직전에 암호화된 블록과 XOR연산을 한 다음에 암호화를 수행
- 같은 값을 갖는 원문 블록이라도 전혀 다른 암호문을 갖음
- 일부 블록만 복호화하고 싶어도 전체를 복호화하여야 함
- 첫번째 블록은 직전 암호문이 없으므로 XOR 연산대상이 없다. => 초기화 벡터(InitializationVector)를 입력받는다.

cf) IV: 원문 블록을 XOR하는데 쓰이기 때문에 당연히 블록 사이즈와 동일한 크기여야 한다.

패딩
AES와 같은 16바이트(128비트) 크기의 블록 암호 알고리즘을 사용하는데 원문의 크기가 16바이트의 배수가 아니라면
마지막 블록은 16바이트보다 작은 크기가 된다.
이때, 마지막 블록의 빈 부분을 채워주는 방식을 패딩이라 한다.

유명한 방식 2가지
- PKCS5 :                               mod(modulo)연산 == %(나머지)
원문의 길이가 31바이트면, 마지막 블록은 31 mode 8의 크기, 패딩의 크기는 8 - (31 mode 8)이 된다. -> 1이 된다.
단순히 패딩 크기의 값을 갖는 바이트를 크기만큼 반복한다.
ex) 패딩크기가 2이면 02 02, 3이면 03 03 03 이렇게 채우는 식이다.

- PKCS7:
8바이트가 아닌 가변길이를 갖는다는 점에서 다르다. 원리는 PKCS5와 동일
PKCS7 블록 크기가 1 ~ 255 까지의 값

자바에서는 위 두가지를 구분하지 않고 PKCS5Padding 이라 한다.




